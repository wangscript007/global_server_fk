// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zookeeper.proto

#include "zookeeper.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace config {
class ZkInstanceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ZkInstanceInfo>
      _instance;
} _ZkInstanceInfo_default_instance_;
class ZkConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ZkConfig>
      _instance;
} _ZkConfig_default_instance_;
}  // namespace config
namespace protobuf_zookeeper_2eproto {
void InitDefaultsZkInstanceInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::config::_ZkInstanceInfo_default_instance_;
    new (ptr) ::config::ZkInstanceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::config::ZkInstanceInfo::InitAsDefaultInstance();
}

void InitDefaultsZkInstanceInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsZkInstanceInfoImpl);
}

void InitDefaultsZkConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_zookeeper_2eproto::InitDefaultsZkInstanceInfo();
  {
    void* ptr = &::config::_ZkConfig_default_instance_;
    new (ptr) ::config::ZkConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::config::ZkConfig::InitAsDefaultInstance();
}

void InitDefaultsZkConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsZkConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::ZkInstanceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::ZkInstanceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::ZkInstanceInfo, instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::ZkInstanceInfo, ip_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::ZkInstanceInfo, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::ZkInstanceInfo, passwd_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::ZkConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::ZkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::config::ZkConfig, instance_list_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::config::ZkInstanceInfo)},
  { 13, 19, sizeof(::config::ZkConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::config::_ZkInstanceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::config::_ZkConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "zookeeper.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017zookeeper.proto\022\006config\"T\n\016ZkInstanceI"
      "nfo\022\023\n\013instance_id\030\001 \001(\r\022\017\n\007ip_port\030\002 \001("
      "\t\022\014\n\004user\030\003 \001(\t\022\016\n\006passwd\030\004 \001(\t\"9\n\010ZkCon"
      "fig\022-\n\rinstance_list\030\001 \003(\0132\026.config.ZkIn"
      "stanceInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zookeeper.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zookeeper_2eproto
namespace config {

// ===================================================================

void ZkInstanceInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZkInstanceInfo::kInstanceIdFieldNumber;
const int ZkInstanceInfo::kIpPortFieldNumber;
const int ZkInstanceInfo::kUserFieldNumber;
const int ZkInstanceInfo::kPasswdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZkInstanceInfo::ZkInstanceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_zookeeper_2eproto::InitDefaultsZkInstanceInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.ZkInstanceInfo)
}
ZkInstanceInfo::ZkInstanceInfo(const ZkInstanceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_port()) {
    ip_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_port_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_passwd()) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  instance_id_ = from.instance_id_;
  // @@protoc_insertion_point(copy_constructor:config.ZkInstanceInfo)
}

void ZkInstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_ = 0u;
}

ZkInstanceInfo::~ZkInstanceInfo() {
  // @@protoc_insertion_point(destructor:config.ZkInstanceInfo)
  SharedDtor();
}

void ZkInstanceInfo::SharedDtor() {
  ip_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ZkInstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZkInstanceInfo::descriptor() {
  ::protobuf_zookeeper_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zookeeper_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ZkInstanceInfo& ZkInstanceInfo::default_instance() {
  ::protobuf_zookeeper_2eproto::InitDefaultsZkInstanceInfo();
  return *internal_default_instance();
}

ZkInstanceInfo* ZkInstanceInfo::New(::google::protobuf::Arena* arena) const {
  ZkInstanceInfo* n = new ZkInstanceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ZkInstanceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:config.ZkInstanceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!ip_port_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_port_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!passwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*passwd_.UnsafeRawStringPointer())->clear();
    }
  }
  instance_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ZkInstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.ZkInstanceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 instance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_port().data(), static_cast<int>(this->ip_port().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.ZkInstanceInfo.ip_port");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.ZkInstanceInfo.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string passwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwd().data(), static_cast<int>(this->passwd().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.ZkInstanceInfo.passwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.ZkInstanceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.ZkInstanceInfo)
  return false;
#undef DO_
}

void ZkInstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.ZkInstanceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 instance_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instance_id(), output);
  }

  // optional string ip_port = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_port().data(), static_cast<int>(this->ip_port().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.ZkInstanceInfo.ip_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip_port(), output);
  }

  // optional string user = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.ZkInstanceInfo.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user(), output);
  }

  // optional string passwd = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.ZkInstanceInfo.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->passwd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.ZkInstanceInfo)
}

::google::protobuf::uint8* ZkInstanceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.ZkInstanceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 instance_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instance_id(), target);
  }

  // optional string ip_port = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_port().data(), static_cast<int>(this->ip_port().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.ZkInstanceInfo.ip_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_port(), target);
  }

  // optional string user = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.ZkInstanceInfo.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // optional string passwd = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.ZkInstanceInfo.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.ZkInstanceInfo)
  return target;
}

size_t ZkInstanceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.ZkInstanceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ip_port = 2;
    if (has_ip_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_port());
    }

    // optional string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // optional uint32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZkInstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.ZkInstanceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ZkInstanceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ZkInstanceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.ZkInstanceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.ZkInstanceInfo)
    MergeFrom(*source);
  }
}

void ZkInstanceInfo::MergeFrom(const ZkInstanceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.ZkInstanceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip_port();
      ip_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_port_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_passwd();
      passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
    }
    if (cached_has_bits & 0x00000008u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ZkInstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.ZkInstanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZkInstanceInfo::CopyFrom(const ZkInstanceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.ZkInstanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZkInstanceInfo::IsInitialized() const {
  return true;
}

void ZkInstanceInfo::Swap(ZkInstanceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZkInstanceInfo::InternalSwap(ZkInstanceInfo* other) {
  using std::swap;
  ip_port_.Swap(&other->ip_port_);
  user_.Swap(&other->user_);
  passwd_.Swap(&other->passwd_);
  swap(instance_id_, other->instance_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ZkInstanceInfo::GetMetadata() const {
  protobuf_zookeeper_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zookeeper_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ZkConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZkConfig::kInstanceListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZkConfig::ZkConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_zookeeper_2eproto::InitDefaultsZkConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.ZkConfig)
}
ZkConfig::ZkConfig(const ZkConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      instance_list_(from.instance_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:config.ZkConfig)
}

void ZkConfig::SharedCtor() {
  _cached_size_ = 0;
}

ZkConfig::~ZkConfig() {
  // @@protoc_insertion_point(destructor:config.ZkConfig)
  SharedDtor();
}

void ZkConfig::SharedDtor() {
}

void ZkConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZkConfig::descriptor() {
  ::protobuf_zookeeper_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zookeeper_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ZkConfig& ZkConfig::default_instance() {
  ::protobuf_zookeeper_2eproto::InitDefaultsZkConfig();
  return *internal_default_instance();
}

ZkConfig* ZkConfig::New(::google::protobuf::Arena* arena) const {
  ZkConfig* n = new ZkConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ZkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:config.ZkConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ZkConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.ZkConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .config.ZkInstanceInfo instance_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_instance_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.ZkConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.ZkConfig)
  return false;
#undef DO_
}

void ZkConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.ZkConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .config.ZkInstanceInfo instance_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instance_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instance_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.ZkConfig)
}

::google::protobuf::uint8* ZkConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.ZkConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .config.ZkInstanceInfo instance_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instance_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->instance_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.ZkConfig)
  return target;
}

size_t ZkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.ZkConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .config.ZkInstanceInfo instance_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->instance_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->instance_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZkConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.ZkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ZkConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ZkConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.ZkConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.ZkConfig)
    MergeFrom(*source);
  }
}

void ZkConfig::MergeFrom(const ZkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.ZkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instance_list_.MergeFrom(from.instance_list_);
}

void ZkConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.ZkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZkConfig::CopyFrom(const ZkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.ZkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZkConfig::IsInitialized() const {
  return true;
}

void ZkConfig::Swap(ZkConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZkConfig::InternalSwap(ZkConfig* other) {
  using std::swap;
  instance_list_.InternalSwap(&other->instance_list_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ZkConfig::GetMetadata() const {
  protobuf_zookeeper_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zookeeper_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config

// @@protoc_insertion_point(global_scope)
