// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transfersvr_config.proto

#ifndef PROTOBUF_transfersvr_5fconfig_2eproto__INCLUDED
#define PROTOBUF_transfersvr_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_transfersvr_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTransfersvrConfigImpl();
void InitDefaultsTransfersvrConfig();
inline void InitDefaults() {
  InitDefaultsTransfersvrConfig();
}
}  // namespace protobuf_transfersvr_5fconfig_2eproto
namespace config {
class TransfersvrConfig;
class TransfersvrConfigDefaultTypeInternal;
extern TransfersvrConfigDefaultTypeInternal _TransfersvrConfig_default_instance_;
}  // namespace config
namespace config {

// ===================================================================

class TransfersvrConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.TransfersvrConfig) */ {
 public:
  TransfersvrConfig();
  virtual ~TransfersvrConfig();

  TransfersvrConfig(const TransfersvrConfig& from);

  inline TransfersvrConfig& operator=(const TransfersvrConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransfersvrConfig(TransfersvrConfig&& from) noexcept
    : TransfersvrConfig() {
    *this = ::std::move(from);
  }

  inline TransfersvrConfig& operator=(TransfersvrConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransfersvrConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransfersvrConfig* internal_default_instance() {
    return reinterpret_cast<const TransfersvrConfig*>(
               &_TransfersvrConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TransfersvrConfig* other);
  friend void swap(TransfersvrConfig& a, TransfersvrConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransfersvrConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  TransfersvrConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransfersvrConfig& from);
  void MergeFrom(const TransfersvrConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransfersvrConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string listen_ip = 1;
  bool has_listen_ip() const;
  void clear_listen_ip();
  static const int kListenIpFieldNumber = 1;
  const ::std::string& listen_ip() const;
  void set_listen_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_listen_ip(::std::string&& value);
  #endif
  void set_listen_ip(const char* value);
  void set_listen_ip(const char* value, size_t size);
  ::std::string* mutable_listen_ip();
  ::std::string* release_listen_ip();
  void set_allocated_listen_ip(::std::string* listen_ip);

  // optional int32 svr_inst_id = 2;
  bool has_svr_inst_id() const;
  void clear_svr_inst_id();
  static const int kSvrInstIdFieldNumber = 2;
  ::google::protobuf::int32 svr_inst_id() const;
  void set_svr_inst_id(::google::protobuf::int32 value);

  // optional int32 svr_zone = 3;
  bool has_svr_zone() const;
  void clear_svr_zone();
  static const int kSvrZoneFieldNumber = 3;
  ::google::protobuf::int32 svr_zone() const;
  void set_svr_zone(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:config.TransfersvrConfig)
 private:
  void set_has_listen_ip();
  void clear_has_listen_ip();
  void set_has_svr_inst_id();
  void clear_has_svr_inst_id();
  void set_has_svr_zone();
  void clear_has_svr_zone();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr listen_ip_;
  ::google::protobuf::int32 svr_inst_id_;
  ::google::protobuf::int32 svr_zone_;
  friend struct ::protobuf_transfersvr_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_transfersvr_5fconfig_2eproto::InitDefaultsTransfersvrConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransfersvrConfig

// optional string listen_ip = 1;
inline bool TransfersvrConfig::has_listen_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransfersvrConfig::set_has_listen_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransfersvrConfig::clear_has_listen_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransfersvrConfig::clear_listen_ip() {
  listen_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listen_ip();
}
inline const ::std::string& TransfersvrConfig::listen_ip() const {
  // @@protoc_insertion_point(field_get:config.TransfersvrConfig.listen_ip)
  return listen_ip_.GetNoArena();
}
inline void TransfersvrConfig::set_listen_ip(const ::std::string& value) {
  set_has_listen_ip();
  listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.TransfersvrConfig.listen_ip)
}
#if LANG_CXX11
inline void TransfersvrConfig::set_listen_ip(::std::string&& value) {
  set_has_listen_ip();
  listen_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.TransfersvrConfig.listen_ip)
}
#endif
inline void TransfersvrConfig::set_listen_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_listen_ip();
  listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.TransfersvrConfig.listen_ip)
}
inline void TransfersvrConfig::set_listen_ip(const char* value, size_t size) {
  set_has_listen_ip();
  listen_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.TransfersvrConfig.listen_ip)
}
inline ::std::string* TransfersvrConfig::mutable_listen_ip() {
  set_has_listen_ip();
  // @@protoc_insertion_point(field_mutable:config.TransfersvrConfig.listen_ip)
  return listen_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransfersvrConfig::release_listen_ip() {
  // @@protoc_insertion_point(field_release:config.TransfersvrConfig.listen_ip)
  clear_has_listen_ip();
  return listen_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransfersvrConfig::set_allocated_listen_ip(::std::string* listen_ip) {
  if (listen_ip != NULL) {
    set_has_listen_ip();
  } else {
    clear_has_listen_ip();
  }
  listen_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listen_ip);
  // @@protoc_insertion_point(field_set_allocated:config.TransfersvrConfig.listen_ip)
}

// optional int32 svr_inst_id = 2;
inline bool TransfersvrConfig::has_svr_inst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransfersvrConfig::set_has_svr_inst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransfersvrConfig::clear_has_svr_inst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransfersvrConfig::clear_svr_inst_id() {
  svr_inst_id_ = 0;
  clear_has_svr_inst_id();
}
inline ::google::protobuf::int32 TransfersvrConfig::svr_inst_id() const {
  // @@protoc_insertion_point(field_get:config.TransfersvrConfig.svr_inst_id)
  return svr_inst_id_;
}
inline void TransfersvrConfig::set_svr_inst_id(::google::protobuf::int32 value) {
  set_has_svr_inst_id();
  svr_inst_id_ = value;
  // @@protoc_insertion_point(field_set:config.TransfersvrConfig.svr_inst_id)
}

// optional int32 svr_zone = 3;
inline bool TransfersvrConfig::has_svr_zone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransfersvrConfig::set_has_svr_zone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransfersvrConfig::clear_has_svr_zone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransfersvrConfig::clear_svr_zone() {
  svr_zone_ = 0;
  clear_has_svr_zone();
}
inline ::google::protobuf::int32 TransfersvrConfig::svr_zone() const {
  // @@protoc_insertion_point(field_get:config.TransfersvrConfig.svr_zone)
  return svr_zone_;
}
inline void TransfersvrConfig::set_svr_zone(::google::protobuf::int32 value) {
  set_has_svr_zone();
  svr_zone_ = value;
  // @@protoc_insertion_point(field_set:config.TransfersvrConfig.svr_zone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transfersvr_5fconfig_2eproto__INCLUDED
