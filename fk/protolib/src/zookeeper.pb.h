// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zookeeper.proto

#ifndef PROTOBUF_zookeeper_2eproto__INCLUDED
#define PROTOBUF_zookeeper_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_zookeeper_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsZkInstanceInfoImpl();
void InitDefaultsZkInstanceInfo();
void InitDefaultsZkConfigImpl();
void InitDefaultsZkConfig();
inline void InitDefaults() {
  InitDefaultsZkInstanceInfo();
  InitDefaultsZkConfig();
}
}  // namespace protobuf_zookeeper_2eproto
namespace config {
class ZkConfig;
class ZkConfigDefaultTypeInternal;
extern ZkConfigDefaultTypeInternal _ZkConfig_default_instance_;
class ZkInstanceInfo;
class ZkInstanceInfoDefaultTypeInternal;
extern ZkInstanceInfoDefaultTypeInternal _ZkInstanceInfo_default_instance_;
}  // namespace config
namespace config {

// ===================================================================

class ZkInstanceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.ZkInstanceInfo) */ {
 public:
  ZkInstanceInfo();
  virtual ~ZkInstanceInfo();

  ZkInstanceInfo(const ZkInstanceInfo& from);

  inline ZkInstanceInfo& operator=(const ZkInstanceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZkInstanceInfo(ZkInstanceInfo&& from) noexcept
    : ZkInstanceInfo() {
    *this = ::std::move(from);
  }

  inline ZkInstanceInfo& operator=(ZkInstanceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZkInstanceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZkInstanceInfo* internal_default_instance() {
    return reinterpret_cast<const ZkInstanceInfo*>(
               &_ZkInstanceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ZkInstanceInfo* other);
  friend void swap(ZkInstanceInfo& a, ZkInstanceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZkInstanceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ZkInstanceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ZkInstanceInfo& from);
  void MergeFrom(const ZkInstanceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ZkInstanceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip_port = 2;
  bool has_ip_port() const;
  void clear_ip_port();
  static const int kIpPortFieldNumber = 2;
  const ::std::string& ip_port() const;
  void set_ip_port(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_port(::std::string&& value);
  #endif
  void set_ip_port(const char* value);
  void set_ip_port(const char* value, size_t size);
  ::std::string* mutable_ip_port();
  ::std::string* release_ip_port();
  void set_allocated_ip_port(::std::string* ip_port);

  // optional string user = 3;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string passwd = 4;
  bool has_passwd() const;
  void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // optional uint32 instance_id = 1;
  bool has_instance_id() const;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  ::google::protobuf::uint32 instance_id() const;
  void set_instance_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:config.ZkInstanceInfo)
 private:
  void set_has_instance_id();
  void clear_has_instance_id();
  void set_has_ip_port();
  void clear_has_ip_port();
  void set_has_user();
  void clear_has_user();
  void set_has_passwd();
  void clear_has_passwd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_port_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::uint32 instance_id_;
  friend struct ::protobuf_zookeeper_2eproto::TableStruct;
  friend void ::protobuf_zookeeper_2eproto::InitDefaultsZkInstanceInfoImpl();
};
// -------------------------------------------------------------------

class ZkConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.ZkConfig) */ {
 public:
  ZkConfig();
  virtual ~ZkConfig();

  ZkConfig(const ZkConfig& from);

  inline ZkConfig& operator=(const ZkConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZkConfig(ZkConfig&& from) noexcept
    : ZkConfig() {
    *this = ::std::move(from);
  }

  inline ZkConfig& operator=(ZkConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZkConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZkConfig* internal_default_instance() {
    return reinterpret_cast<const ZkConfig*>(
               &_ZkConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ZkConfig* other);
  friend void swap(ZkConfig& a, ZkConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZkConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ZkConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ZkConfig& from);
  void MergeFrom(const ZkConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ZkConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .config.ZkInstanceInfo instance_list = 1;
  int instance_list_size() const;
  void clear_instance_list();
  static const int kInstanceListFieldNumber = 1;
  const ::config::ZkInstanceInfo& instance_list(int index) const;
  ::config::ZkInstanceInfo* mutable_instance_list(int index);
  ::config::ZkInstanceInfo* add_instance_list();
  ::google::protobuf::RepeatedPtrField< ::config::ZkInstanceInfo >*
      mutable_instance_list();
  const ::google::protobuf::RepeatedPtrField< ::config::ZkInstanceInfo >&
      instance_list() const;

  // @@protoc_insertion_point(class_scope:config.ZkConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::config::ZkInstanceInfo > instance_list_;
  friend struct ::protobuf_zookeeper_2eproto::TableStruct;
  friend void ::protobuf_zookeeper_2eproto::InitDefaultsZkConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ZkInstanceInfo

// optional uint32 instance_id = 1;
inline bool ZkInstanceInfo::has_instance_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZkInstanceInfo::set_has_instance_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZkInstanceInfo::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZkInstanceInfo::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
inline ::google::protobuf::uint32 ZkInstanceInfo::instance_id() const {
  // @@protoc_insertion_point(field_get:config.ZkInstanceInfo.instance_id)
  return instance_id_;
}
inline void ZkInstanceInfo::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:config.ZkInstanceInfo.instance_id)
}

// optional string ip_port = 2;
inline bool ZkInstanceInfo::has_ip_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZkInstanceInfo::set_has_ip_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZkInstanceInfo::clear_has_ip_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZkInstanceInfo::clear_ip_port() {
  ip_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_port();
}
inline const ::std::string& ZkInstanceInfo::ip_port() const {
  // @@protoc_insertion_point(field_get:config.ZkInstanceInfo.ip_port)
  return ip_port_.GetNoArena();
}
inline void ZkInstanceInfo::set_ip_port(const ::std::string& value) {
  set_has_ip_port();
  ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.ZkInstanceInfo.ip_port)
}
#if LANG_CXX11
inline void ZkInstanceInfo::set_ip_port(::std::string&& value) {
  set_has_ip_port();
  ip_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.ZkInstanceInfo.ip_port)
}
#endif
inline void ZkInstanceInfo::set_ip_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_port();
  ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.ZkInstanceInfo.ip_port)
}
inline void ZkInstanceInfo::set_ip_port(const char* value, size_t size) {
  set_has_ip_port();
  ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.ZkInstanceInfo.ip_port)
}
inline ::std::string* ZkInstanceInfo::mutable_ip_port() {
  set_has_ip_port();
  // @@protoc_insertion_point(field_mutable:config.ZkInstanceInfo.ip_port)
  return ip_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZkInstanceInfo::release_ip_port() {
  // @@protoc_insertion_point(field_release:config.ZkInstanceInfo.ip_port)
  clear_has_ip_port();
  return ip_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZkInstanceInfo::set_allocated_ip_port(::std::string* ip_port) {
  if (ip_port != NULL) {
    set_has_ip_port();
  } else {
    clear_has_ip_port();
  }
  ip_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_port);
  // @@protoc_insertion_point(field_set_allocated:config.ZkInstanceInfo.ip_port)
}

// optional string user = 3;
inline bool ZkInstanceInfo::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZkInstanceInfo::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZkInstanceInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZkInstanceInfo::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& ZkInstanceInfo::user() const {
  // @@protoc_insertion_point(field_get:config.ZkInstanceInfo.user)
  return user_.GetNoArena();
}
inline void ZkInstanceInfo::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.ZkInstanceInfo.user)
}
#if LANG_CXX11
inline void ZkInstanceInfo::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.ZkInstanceInfo.user)
}
#endif
inline void ZkInstanceInfo::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.ZkInstanceInfo.user)
}
inline void ZkInstanceInfo::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.ZkInstanceInfo.user)
}
inline ::std::string* ZkInstanceInfo::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:config.ZkInstanceInfo.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZkInstanceInfo::release_user() {
  // @@protoc_insertion_point(field_release:config.ZkInstanceInfo.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZkInstanceInfo::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:config.ZkInstanceInfo.user)
}

// optional string passwd = 4;
inline bool ZkInstanceInfo::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZkInstanceInfo::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZkInstanceInfo::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZkInstanceInfo::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_passwd();
}
inline const ::std::string& ZkInstanceInfo::passwd() const {
  // @@protoc_insertion_point(field_get:config.ZkInstanceInfo.passwd)
  return passwd_.GetNoArena();
}
inline void ZkInstanceInfo::set_passwd(const ::std::string& value) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.ZkInstanceInfo.passwd)
}
#if LANG_CXX11
inline void ZkInstanceInfo::set_passwd(::std::string&& value) {
  set_has_passwd();
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.ZkInstanceInfo.passwd)
}
#endif
inline void ZkInstanceInfo::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.ZkInstanceInfo.passwd)
}
inline void ZkInstanceInfo::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.ZkInstanceInfo.passwd)
}
inline ::std::string* ZkInstanceInfo::mutable_passwd() {
  set_has_passwd();
  // @@protoc_insertion_point(field_mutable:config.ZkInstanceInfo.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZkInstanceInfo::release_passwd() {
  // @@protoc_insertion_point(field_release:config.ZkInstanceInfo.passwd)
  clear_has_passwd();
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZkInstanceInfo::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    set_has_passwd();
  } else {
    clear_has_passwd();
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:config.ZkInstanceInfo.passwd)
}

// -------------------------------------------------------------------

// ZkConfig

// repeated .config.ZkInstanceInfo instance_list = 1;
inline int ZkConfig::instance_list_size() const {
  return instance_list_.size();
}
inline void ZkConfig::clear_instance_list() {
  instance_list_.Clear();
}
inline const ::config::ZkInstanceInfo& ZkConfig::instance_list(int index) const {
  // @@protoc_insertion_point(field_get:config.ZkConfig.instance_list)
  return instance_list_.Get(index);
}
inline ::config::ZkInstanceInfo* ZkConfig::mutable_instance_list(int index) {
  // @@protoc_insertion_point(field_mutable:config.ZkConfig.instance_list)
  return instance_list_.Mutable(index);
}
inline ::config::ZkInstanceInfo* ZkConfig::add_instance_list() {
  // @@protoc_insertion_point(field_add:config.ZkConfig.instance_list)
  return instance_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::config::ZkInstanceInfo >*
ZkConfig::mutable_instance_list() {
  // @@protoc_insertion_point(field_mutable_list:config.ZkConfig.instance_list)
  return &instance_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::config::ZkInstanceInfo >&
ZkConfig::instance_list() const {
  // @@protoc_insertion_point(field_list:config.ZkConfig.instance_list)
  return instance_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zookeeper_2eproto__INCLUDED
